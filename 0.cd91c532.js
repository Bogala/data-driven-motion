webpackJsonp([0,2],{Bgqh:function(e,o){e.exports="<h1 id=api>Api</h1> <h3 id=props>Props</h3> <ul> <li><h4 id=component>component</h4> <p><code>PropTypes.element</code></p> <p>wrapper element ex: <code>&lt;div/&gt;</code></p> </li> </ul> <ul> <li><h4 id=data>data</h4> <p><code>PropTypes.array</code></p> <p>array of data</p> <p><strong>It does not matter what <code>data</code> contains, as long as it is an array</strong></p> </li> <li><h4 id=render>render</h4> <p><code>PropTypes.oneOfType([PropTypes.func, PropTypes.arrayOf(PropTypes.func)])</code></p> <pre><code class=lang-js>(key, data, style) =&gt; ReactElement\n</code></pre> <p>called on render for each item in <code>data</code> with the <code>key</code> from <code>getKey</code>, <code>data</code> from <code>data[index]</code>, and <code>style</code>, the result of: <code>onComponentMount</code>, <code>onRender</code>, <code>onRemount</code>, or <code>onUnmount</code></p> <p>If an array is provided it will render the resulting elements in order. This is useful for creating animated layers.</p> </li> </ul> <ul> <li><h4 id=getkey>getKey</h4> <p><code>PropTypes.func</code></p> <pre><code class=lang-js>(data, i) =&gt; string\n</code></pre> <p>help identify which items have been changed, added, or are removed</p> <p><a href=https://facebook.github.io/react/docs/lists-and-keys.html>React docs on lists and keys</a></p> </li> </ul> <ul> <li><h4 id=oncomponentmount>onComponentMount</h4> <p><code>PropTypes.func</code></p> <pre><code class=lang-js>(data, i) =&gt; Style object\n</code></pre> <p><code>data === props.data[i]</code></p> <p>called when <code>component</code> mounts</p> <p><strong>do not wrap values in springs</strong></p> </li> </ul> <ul> <li><h4 id=onrender>onRender</h4> <p><code>PropTypes.func</code></p> <pre><code class=lang-js>(data, i, spring) =&gt; Style object\n</code></pre> <p><code>data === props.data[i]</code></p> <p>called when <code>props.component</code> mounts</p> <p><strong>ok to wrap values in springs</strong></p> </li> </ul> <ul> <li><h4 id=onremount>onRemount</h4> <p><code>PropTypes.func</code></p> <pre><code class=lang-js>({ key, data, style }) =&gt; Style object\n</code></pre> <p><em>Notice the argument is wrapped in an object</em></p> <p>The argument is the computed config from <code>onRender</code> </p> <p><strong>do not wrap values in springs</strong></p> </li> </ul> <ul> <li><h4 id=onunmount>onUnmount</h4> <p><code>PropTypes.func</code></p> <pre><code class=lang-js>({ key, data, style }) =&gt; Style object\n</code></pre> <p><em>Notice the argument is wrapped in an object</em></p> <p>The argument is the computed config from <code>onRender</code>. </p> <p><strong>ok to wrap values in springs</strong></p> </li> </ul> "},CSMW:function(e,o,n){"use strict";Object.defineProperty(o,"__esModule",{value:!0});var t=n("AX2D"),d=n("Bgqh"),p=n.n(d),r=Object.assign||function(e){for(var o=1;o<arguments.length;o++){var n=arguments[o];for(var t in n)Object.prototype.hasOwnProperty.call(n,t)&&(e[t]=n[t])}return e};o.default=function(e){return t.default.createElement("div",r({},e,{className:"api-docs markdown-body"}),t.default.createElement("div",{dangerouslySetInnerHTML:{__html:p.a}}))}}});
//# sourceMappingURL=0.cd91c532.js.map